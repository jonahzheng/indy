                       README for the Indy 10 FPC Version

This is an effort to make Indy 10 work in FreePascal using the Lazarus IDE. Our 
goal is to eventually get this code merged into the main Indy branch which 
would then support both Borland Delphi and FreePascal. Our goals are to support 
in Linux and other operating systems including various microprocessor 
architecture that FreePascal supports. At the same time, we want to follow the 
Indy Coding Conventions and Standards" 
(http://www.indyproject.org/sockets/Teams/Core/Docs/Standards/) so that NET is 
supported at the same time. The goal is to support as many systems as we can.

Some success has been reported with:

Win32
Linux
FreeBSD
Mac OS/X (Darwin)

Currently, we aim to at least support the following systems on all 
architectures they support. 

Win64
WinCE
Sun Solaris

Remember that the success of this effort depends upon you and what you 
contribute.

                                    License

Read the COPYING file located in this distribution.

                           Installation Instructions

In the fpc directory, there is a Makefile. Run "make all". If you are using 
Windows, you must use the GNU BinUtils Make program that is included in most 
FreePascal distributions.
 
Run "make all" followed by "make install" from the fpc directory. You may 
be able to specify an install prefix by adding "INSTALL_PREFIX=fpcbasedir".

If you are running Lazarus, you may install the design-time package into 
Lazarus. Just open, compile, and install the indylaz.lpk file located in the 
lazarus directory.

You probably should read the Development Tutorial (aka Build FAQ) at 
http://www.stack.nl/~marcov/buildfaq.pdf for more information about the 
FreePascal build process.

                                  Known Issues

In Linux, this code requires that you have at least FreePascal 2.0.2 or the 
current development snapshots. Earlier versions of the FreePascal RTL did not 
have some constants defined and Indy uses those constants.

The ElizaWeb demo may terminate after serving one page with the error, 
"Exception=A thread cannot destroy itself except by setting FreeOnTerminate and 
leaving" in Unix operating systems. The current snapshot versions of FPC have a 
fix for this problem and this issue.

In IdStackLinux and IdStackUnix, we need a working TIdStackLinux.ReceiveMsg and 
TIdStackUnix.ReceiveMsg that uses the standard Posix recvmsg system call. This 
is required for ICMPv6 support.

The FTP server demo does not work yet. I have to do some coding to get it to 
work in both Unix and Win32. The code and component settings will probably be 
different for each platform.

On Mac OS/X (Darwin), there is a problem with the type TUnixSockAddr type 
definition. This was fixed on 2/25/2006 in the FreePascal source-code tree.. 
The fix is to patch rtl/unix/sockets.pp with these lines above the file 
includes directives:

d{$ifdef Darwin}
{$DEFINE SOCK_HAS_SINLEN}               // BSD definition of scoketaddr
{$endif}  

In Win32, you may get an error saying that libasync is missing. This has been 
fixed in the current snapshots in both the Fixes_2_0 and Trunk Subversion 
branches.

IdSysLinux should be renamed IdSysUnix because it is used on all Unix targets 
or I might make a separate file.

                                For Linux Users

In Linux, we no longer use IdStackLinux for libc. If you want to use the 
libc-based stack backend, you have to modify the Makefile.fpc and then 
rebuilding the Makefile with fpcmake. We do not recommend using libc because 
that is not being used in some Linux architectures.

                                 Contacting Us

Do not contact us wanting help for your project or any support. Only report 
specific errors, improvements, and contributions as well as any success you 
have with your particular operating system/architecture combination. E-Mail J. 
Peter Mugaas at oma00215@mail.wvnet.edu.
